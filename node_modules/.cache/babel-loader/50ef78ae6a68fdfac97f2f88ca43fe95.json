{"ast":null,"code":"import _slicedToArray from\"/Users/hrajput/workspace/clever-pro/todo-clone/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import'./App.css';import{Button,FormControl,InputLabel,Input}from'@material-ui/core';import Todo from'./Todo.js';import db from'./firebase.js';import firebase from'firebase';function App(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),todos=_useState2[0],setTodos=_useState2[1];var _useState3=useState(''),_useState4=_slicedToArray(_useState3,2),input=_useState4[0],setInput=_useState4[1];// when the app load , we need to listen to the database and fetch new todos as they get added/removed\nuseEffect(function(){// this code fire when the app.js load, it will call only once\ndb.collection('todos').orderBy('timestamp','desc').onSnapshot(function(snapshot){//snapshot basically take the sanpshot if something change in the databse\nsetTodos(snapshot.docs.map(function(doc){return doc.data().todo;}));});},[]);var addTodo=function addTodo(event){event.preventDefault();db.collection('todos').add({todo:input,timestamp:firebase.firestore.FieldValue.serverTimestamp()});//setTodos([...todos, input]);\nsetInput('');};return/*#__PURE__*/React.createElement(\"div\",{className:\"App\"},/*#__PURE__*/React.createElement(\"h1\",null,\"Welcome to Todo-App\"),/*#__PURE__*/React.createElement(\"form\",null,/*#__PURE__*/React.createElement(FormControl,null,/*#__PURE__*/React.createElement(InputLabel,null,\"Write a todo\"),/*#__PURE__*/React.createElement(Input,{value:input,onChange:function onChange(event){return setInput(event.target.value);}})),/*#__PURE__*/React.createElement(Button,{disabled:!input,color:\"primary\",type:\"submit\",variant:\"contained\",onClick:addTodo},\"Add Todo\")),/*#__PURE__*/React.createElement(\"ul\",null,todos.map(function(todo){return/*#__PURE__*/React.createElement(Todo,{todo:todo});})));}export default App;","map":{"version":3,"sources":["/Users/hrajput/workspace/clever-pro/todo-clone/src/App.js"],"names":["React","useState","useEffect","Button","FormControl","InputLabel","Input","Todo","db","firebase","App","todos","setTodos","input","setInput","collection","orderBy","onSnapshot","snapshot","docs","map","doc","data","todo","addTodo","event","preventDefault","add","timestamp","firestore","FieldValue","serverTimestamp","target","value"],"mappings":"qKAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAO,WAAP,CACA,OAASC,MAAT,CAAiBC,WAAjB,CAA8BC,UAA9B,CAA0CC,KAA1C,KAAuD,mBAAvD,CACA,MAAOC,CAAAA,IAAP,KAAiB,WAAjB,CACA,MAAOC,CAAAA,EAAP,KAAe,eAAf,CACA,MAAOC,CAAAA,QAAP,KAAqB,UAArB,CAEA,QAASC,CAAAA,GAAT,EAAe,eACaT,QAAQ,CAAC,EAAD,CADrB,wCACNU,KADM,eACCC,QADD,8BAEaX,QAAQ,CAAC,EAAD,CAFrB,yCAENY,KAFM,eAECC,QAFD,eAIb;AAEAZ,SAAS,CAAC,UAAM,CACd;AACAM,EAAE,CAACO,UAAH,CAAc,OAAd,EAAuBC,OAAvB,CAA+B,WAA/B,CAA2C,MAA3C,EAAmDC,UAAnD,CAA8D,SAAAC,QAAQ,CAAI,CACxE;AACAN,QAAQ,CAACM,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAkB,SAAAC,GAAG,QAAIA,CAAAA,GAAG,CAACC,IAAJ,GAAWC,IAAf,EAArB,CAAD,CAAR,CACD,CAHD,EAID,CANQ,CAMN,EANM,CAAT,CAQA,GAAMC,CAAAA,OAAO,CAAG,QAAVA,CAAAA,OAAU,CAACC,KAAD,CAAU,CACxBA,KAAK,CAACC,cAAN,GACAlB,EAAE,CAACO,UAAH,CAAc,OAAd,EAAuBY,GAAvB,CAA2B,CACzBJ,IAAI,CAAEV,KADmB,CAEzBe,SAAS,CAAEnB,QAAQ,CAACoB,SAAT,CAAmBC,UAAnB,CAA8BC,eAA9B,EAFc,CAA3B,EAIA;AACAjB,QAAQ,CAAC,EAAD,CAAR,CACD,CARD,CASA,mBACE,2BAAK,SAAS,CAAC,KAAf,eACE,oDADF,cAEE,6CACE,oBAAC,WAAD,mBACE,oBAAC,UAAD,qBADF,cAEE,oBAAC,KAAD,EAAO,KAAK,CAAED,KAAd,CAAqB,QAAQ,CAAE,kBAAAY,KAAK,QAAEX,CAAAA,QAAQ,CAACW,KAAK,CAACO,MAAN,CAAaC,KAAd,CAAV,EAApC,EAFF,CADF,cAKE,oBAAC,MAAD,EAAQ,QAAQ,CAAE,CAACpB,KAAnB,CAA0B,KAAK,CAAC,SAAhC,CAA0C,IAAI,CAAC,QAA/C,CAAwD,OAAO,CAAC,WAAhE,CAA4E,OAAO,CAAEW,OAArF,aALF,CAFF,cASE,8BACGb,KAAK,CAACS,GAAN,CAAU,SAAAG,IAAI,qBACb,oBAAC,IAAD,EAAM,IAAI,CAAEA,IAAZ,EADa,EAAd,CADH,CATF,CADF,CAiBD,CAED,cAAeb,CAAAA,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Button, FormControl, InputLabel, Input } from '@material-ui/core';\nimport Todo from './Todo.js'\nimport db from './firebase.js'\nimport firebase from 'firebase';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState('');\n\n  // when the app load , we need to listen to the database and fetch new todos as they get added/removed\n\n  useEffect(() => {\n    // this code fire when the app.js load, it will call only once\n    db.collection('todos').orderBy('timestamp','desc').onSnapshot(snapshot => {\n      //snapshot basically take the sanpshot if something change in the databse\n      setTodos(snapshot.docs.map(doc => doc.data().todo))\n    })\n  }, [])\n\n  const addTodo = (event) =>{\n    event.preventDefault();\n    db.collection('todos').add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n    //setTodos([...todos, input]);\n    setInput('');\n  }\n  return (\n    <div className=\"App\">\n      <h1>Welcome to Todo-App</h1>\n      <form>\n        <FormControl>\n          <InputLabel>Write a todo</InputLabel>\n          <Input value={input} onChange={event=>setInput(event.target.value)}/>\n        </FormControl>\n        <Button disabled={!input} color=\"primary\" type=\"submit\" variant=\"contained\" onClick={addTodo}>Add Todo</Button>\n      </form>\n      <ul>\n        {todos.map(todo =>(\n          <Todo todo={todo}/>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}