{"ast":null,"code":"var _jsxFileName = \"/Users/hrajput/workspace/clever-pro/todo-clone/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Button, FormControl, InputLabel, Input } from '@material-ui/core';\nimport Todo from './Todo.js';\nimport db from './firebase.js';\nimport firebase from 'firebase';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState(''); // when the app load , we need to listen to the database and fetch new todos as they get added/removed\n\n  useEffect(() => {\n    // this code fire when the app.js load, it will call only once\n    db.collection('todos').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n      //snapshot basically take the sanpshot if something change in the databse\n      setTodos(snapshot.docs.map(doc => ({\n        id: doc.id,\n        todo: doc.data.todo\n      })));\n    }, []);\n  });\n\n  const addTodo = event => {\n    event.preventDefault();\n    db.collection('todos').add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    }); //setTodos([...todos, input]);\n\n    setInput('');\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }\n  }, \"Welcome to Todo-App\"), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(FormControl, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputLabel, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }\n  }, \"Write a todo\"), /*#__PURE__*/React.createElement(Input, {\n    value: input,\n    onChange: event => setInput(event.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Button, {\n    disabled: !input,\n    color: \"primary\",\n    type: \"submit\",\n    variant: \"contained\",\n    onClick: addTodo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }, \"Add Todo\")), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, todos.map(todo => /*#__PURE__*/React.createElement(Todo, {\n    todo: todo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }))));\n}\n\nexport default App; // live url https://todo-clone-88cd2.web.app/","map":{"version":3,"sources":["/Users/hrajput/workspace/clever-pro/todo-clone/src/App.js"],"names":["React","useState","useEffect","Button","FormControl","InputLabel","Input","Todo","db","firebase","App","todos","setTodos","input","setInput","collection","orderBy","onSnapshot","snapshot","docs","map","doc","id","todo","data","addTodo","event","preventDefault","add","timestamp","firestore","FieldValue","serverTimestamp","target","value"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAO,WAAP;AACA,SAASC,MAAT,EAAiBC,WAAjB,EAA8BC,UAA9B,EAA0CC,KAA1C,QAAuD,mBAAvD;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,EAAP,MAAe,eAAf;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,SAASC,GAAT,GAAe;AACb,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBX,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACY,KAAD,EAAQC,QAAR,IAAoBb,QAAQ,CAAC,EAAD,CAAlC,CAFa,CAIb;;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd;AACAM,IAAAA,EAAE,CAACO,UAAH,CAAc,OAAd,EAAuBC,OAAvB,CAA+B,WAA/B,EAA2C,MAA3C,EAAmDC,UAAnD,CAA8DC,QAAQ,IAAI;AACxE;AACAN,MAAAA,QAAQ,CAACM,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAkBC,GAAG,KAAK;AACjCC,QAAAA,EAAE,EAAED,GAAG,CAACC,EADyB;AAEjCC,QAAAA,IAAI,EAAEF,GAAG,CAACG,IAAJ,CAASD;AAFkB,OAAL,CAArB,CAAD,CAAR;AAIH,KANC,EAMC,EAND;AAOH,GATU,CAAT;;AAWA,QAAME,OAAO,GAAIC,KAAD,IAAU;AACxBA,IAAAA,KAAK,CAACC,cAAN;AACAnB,IAAAA,EAAE,CAACO,UAAH,CAAc,OAAd,EAAuBa,GAAvB,CAA2B;AACzBL,MAAAA,IAAI,EAAEV,KADmB;AAEzBgB,MAAAA,SAAS,EAAEpB,QAAQ,CAACqB,SAAT,CAAmBC,UAAnB,CAA8BC,eAA9B;AAFc,KAA3B,EAFwB,CAMxB;;AACAlB,IAAAA,QAAQ,CAAC,EAAD,CAAR;AACD,GARD;;AASA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE,oBAAC,KAAD;AAAO,IAAA,KAAK,EAAED,KAAd;AAAqB,IAAA,QAAQ,EAAEa,KAAK,IAAEZ,QAAQ,CAACY,KAAK,CAACO,MAAN,CAAaC,KAAd,CAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,eAKE,oBAAC,MAAD;AAAQ,IAAA,QAAQ,EAAE,CAACrB,KAAnB;AAA0B,IAAA,KAAK,EAAC,SAAhC;AAA0C,IAAA,IAAI,EAAC,QAA/C;AAAwD,IAAA,OAAO,EAAC,WAAhE;AAA4E,IAAA,OAAO,EAAEY,OAArF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBALF,CAFF,eASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGd,KAAK,CAACS,GAAN,CAAUG,IAAI,iBACb,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEA,IAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CADH,CATF,CADF;AAiBD;;AAED,eAAeb,GAAf,C,CAGA","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Button, FormControl, InputLabel, Input } from '@material-ui/core';\nimport Todo from './Todo.js'\nimport db from './firebase.js'\nimport firebase from 'firebase';\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState('');\n\n  // when the app load , we need to listen to the database and fetch new todos as they get added/removed\n\n  useEffect(() => {\n    // this code fire when the app.js load, it will call only once\n    db.collection('todos').orderBy('timestamp','desc').onSnapshot(snapshot => {\n      //snapshot basically take the sanpshot if something change in the databse\n      setTodos(snapshot.docs.map(doc => ({\n        id: doc.id,\n        todo: doc.data.todo\n      })))\n  }, [])\n})\n\n  const addTodo = (event) =>{\n    event.preventDefault();\n    db.collection('todos').add({\n      todo: input,\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n    //setTodos([...todos, input]);\n    setInput('');\n  }\n  return (\n    <div className=\"App\">\n      <h1>Welcome to Todo-App</h1>\n      <form>\n        <FormControl>\n          <InputLabel>Write a todo</InputLabel>\n          <Input value={input} onChange={event=>setInput(event.target.value)}/>\n        </FormControl>\n        <Button disabled={!input} color=\"primary\" type=\"submit\" variant=\"contained\" onClick={addTodo}>Add Todo</Button>\n      </form>\n      <ul>\n        {todos.map(todo =>(\n          <Todo todo={todo}/>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n\n\n// live url https://todo-clone-88cd2.web.app/\n"]},"metadata":{},"sourceType":"module"}